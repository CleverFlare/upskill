// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

type Technology {
  logoUrl String
  logoId  String
  name    String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  imageId   String?
  image     String?
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCourse {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @unique @db.ObjectId
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId   String   @unique @db.ObjectId
  course     Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  role       String   @default("instructor")
  isAccepted Boolean  @default(false)
  points     Int      @default(0)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Course {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  thumbnailId   String
  thumbnail     String
  bannerId      String
  banner        String
  description   String
  technologies  Technology[]
  prerequisites String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         UserCourse[]
  announcements Announcement[]
  classes       Class[]
  assignments   Assignment[]
  Quiz          Quiz[]
}

model User {
  id                   String                 @id @default(auto()) @map("_id") @db.ObjectId
  firstName            String
  lastName             String
  username             String                 @unique
  birthDay             String
  role                 String
  gender               String
  phone                String
  password             String
  email                String                 @unique
  isActive             Boolean                @default(false)
  emailVerified        DateTime?
  image                String?
  accounts             Account[]
  sessions             Session[]
  courses              UserCourse[]
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  classes              UserClass[]
  AssignmentSubmission AssignmentSubmission[]
  UserQuestion         UserQuestion[]
  UserQuiz             UserQuiz[]
}

model UserClass {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String  @db.ObjectId
  classId  String  @db.ObjectId
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  class    Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  attended Boolean @default(false)
  watched  Boolean @default(false)
}

type Resource {
  name String
  url  String
}

model Class {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  locked      Boolean     @default(true)
  resources   Resource[]
  users       UserClass[]
  videoId     String
  courseId    String      @db.ObjectId
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

model AssignmentSubmission {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  userId       String      @db.ObjectId
  user         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime    @default(now())
  link         String
  assignment   Assignment? @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  assignmentId String?     @db.ObjectId
}

model Assignment {
  id          String                 @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  content     String
  dueDate     DateTime
  createdAt   DateTime               @default(now())
  courseId    String                 @db.ObjectId
  course      Course                 @relation(fields: [courseId], references: [id], onDelete: Cascade)
  submissions AssignmentSubmission[]
}

model QuizOption {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  body           String
  quizQuestion   QuizQuestion? @relation(fields: [quizQuestionId], references: [id], onDelete: Cascade)
  quizQuestionId String?       @db.ObjectId
}

model UserQuiz {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String         @db.ObjectId
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizId    String         @db.ObjectId
  quiz      Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers   UserQuestion[]
  collected Boolean        @default(false)
}

model UserQuestion {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionId String       @db.ObjectId
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userQuiz   UserQuiz     @relation(fields: [userQuizId], references: [id], onDelete: Cascade)
  userQuizId String       @db.ObjectId
  answer     String
}

model QuizQuestion {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  statement   String
  options     QuizOption[]
  correct     String
  submissions UserQuestion[]
  points      Int
  quiz        Quiz?          @relation(fields: [quizId], references: [id])
  quizId      String?        @db.ObjectId
}

model Quiz {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime       @default(now())
  deadline  DateTime
  courseId  String         @db.ObjectId
  course    Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  UserQuiz  UserQuiz[]
  questions QuizQuestion[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
