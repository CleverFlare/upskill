// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

type Technology {
  logoUrl String
  logoId  String
  name    String
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Announcement {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  imageId   String?
  image     String?
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserCourse {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  userId   String @db.ObjectId
  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  role     String @default("instructor")
}

model Course {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  thumbnailId   String
  thumbnail     String
  bannerId      String
  banner        String
  description   String
  technologies  Technology[]
  prerequisites String[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  users         UserCourse[]
  announcements Announcement[]
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  firstName     String
  lastName      String
  username      String       @unique
  birthDay      String
  role          String
  gender        String
  phone         String
  password      String
  email         String       @unique
  isActive      Boolean      @default(false)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  courses       UserCourse[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
